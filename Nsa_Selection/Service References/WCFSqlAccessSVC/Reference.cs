//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.17929
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nsa_Selection.WCFSqlAccessSVC {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFSqlAccessSVC.IWCFSqlAccess")]
    public interface IWCFSqlAccess {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/GetData", ReplyAction="http://tempuri.org/IWCFSqlAccess/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/GetData", ReplyAction="http://tempuri.org/IWCFSqlAccess/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IWCFSqlAccess/GetDataUsingDataContractResponse")]
        Nsa_Selection.WCFSqlAccessSVC.CompositeType GetDataUsingDataContract(Nsa_Selection.WCFSqlAccessSVC.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IWCFSqlAccess/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Nsa_Selection.WCFSqlAccessSVC.CompositeType> GetDataUsingDataContractAsync(Nsa_Selection.WCFSqlAccessSVC.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getDataSetResponse")]
        System.Data.DataSet getDataSet(string connectStr, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getDataSetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getDataSetAsync(string connectStr, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/executeNonQuery", ReplyAction="http://tempuri.org/IWCFSqlAccess/executeNonQueryResponse")]
        string executeNonQuery(string connectStr, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/executeNonQuery", ReplyAction="http://tempuri.org/IWCFSqlAccess/executeNonQueryResponse")]
        System.Threading.Tasks.Task<string> executeNonQueryAsync(string connectStr, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/executeNonQueryList", ReplyAction="http://tempuri.org/IWCFSqlAccess/executeNonQueryListResponse")]
        int executeNonQueryList(string connectStr, string[] cmdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/executeNonQueryList", ReplyAction="http://tempuri.org/IWCFSqlAccess/executeNonQueryListResponse")]
        System.Threading.Tasks.Task<int> executeNonQueryListAsync(string connectStr, string[] cmdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/checkConnection", ReplyAction="http://tempuri.org/IWCFSqlAccess/checkConnectionResponse")]
        string checkConnection(string connectStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/checkConnection", ReplyAction="http://tempuri.org/IWCFSqlAccess/checkConnectionResponse")]
        System.Threading.Tasks.Task<string> checkConnectionAsync(string connectStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getExcelDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getExcelDataSetResponse")]
        System.Data.DataSet getExcelDataSet(string excelfilename, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getExcelDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getExcelDataSetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getExcelDataSetAsync(string excelfilename, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getExcelRangeDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getExcelRangeDataSetResponse")]
        System.Data.DataSet getExcelRangeDataSet(string excelfilename, string excelSheetName, string excelColsRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getExcelRangeDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getExcelRangeDataSetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getExcelRangeDataSetAsync(string excelfilename, string excelSheetName, string excelColsRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/excelExecuteNonQuery", ReplyAction="http://tempuri.org/IWCFSqlAccess/excelExecuteNonQueryResponse")]
        int excelExecuteNonQuery(string excelfilename, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/excelExecuteNonQuery", ReplyAction="http://tempuri.org/IWCFSqlAccess/excelExecuteNonQueryResponse")]
        System.Threading.Tasks.Task<int> excelExecuteNonQueryAsync(string excelfilename, string cmdText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/readExcelDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/readExcelDataSetResponse")]
        System.Data.DataSet readExcelDataSet(string excelfilename, int sheetNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/readExcelDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/readExcelDataSetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> readExcelDataSetAsync(string excelfilename, int sheetNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/readExcelRangeDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/readExcelRangeDataSetResponse")]
        System.Data.DataSet readExcelRangeDataSet(string excelfilename, int sheetNumber, int[] sheetRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/readExcelRangeDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/readExcelRangeDataSetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> readExcelRangeDataSetAsync(string excelfilename, int sheetNumber, int[] sheetRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/extractDataFromDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/extractDataFromDataSetResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nsa_Selection.WCFSqlAccessSVC.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Type))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
        object extractDataFromDataSet(System.Data.DataSet ds, int rowIndex, string colName, System.Type type, object defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/extractDataFromDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/extractDataFromDataSetResponse")]
        System.Threading.Tasks.Task<object> extractDataFromDataSetAsync(System.Data.DataSet ds, int rowIndex, string colName, System.Type type, object defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getTextFromDataBase", ReplyAction="http://tempuri.org/IWCFSqlAccess/getTextFromDataBaseResponse")]
        string getTextFromDataBase(string connectionString, string cmdText, string colName, string defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getTextFromDataBase", ReplyAction="http://tempuri.org/IWCFSqlAccess/getTextFromDataBaseResponse")]
        System.Threading.Tasks.Task<string> getTextFromDataBaseAsync(string connectionString, string cmdText, string colName, string defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getTextFromDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getTextFromDataSetResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nsa_Selection.WCFSqlAccessSVC.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Type))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
        string getTextFromDataSet(System.Data.DataSet ds, int rowIndex, string colName, object defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getTextFromDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getTextFromDataSetResponse")]
        System.Threading.Tasks.Task<string> getTextFromDataSetAsync(System.Data.DataSet ds, int rowIndex, string colName, object defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getIntFromDataBase", ReplyAction="http://tempuri.org/IWCFSqlAccess/getIntFromDataBaseResponse")]
        int getIntFromDataBase(string connectionStr, string cmdText, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getIntFromDataBase", ReplyAction="http://tempuri.org/IWCFSqlAccess/getIntFromDataBaseResponse")]
        System.Threading.Tasks.Task<int> getIntFromDataBaseAsync(string connectionStr, string cmdText, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getIntFromDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getIntFromDataSetResponse")]
        int getIntFromDataSet(System.Data.DataSet ds, int rowIndex, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getIntFromDataSet", ReplyAction="http://tempuri.org/IWCFSqlAccess/getIntFromDataSetResponse")]
        System.Threading.Tasks.Task<int> getIntFromDataSetAsync(System.Data.DataSet ds, int rowIndex, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/findIntRowIndex", ReplyAction="http://tempuri.org/IWCFSqlAccess/findIntRowIndexResponse")]
        int findIntRowIndex(System.Data.DataSet ds, int valueToFind, int startingIndex, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/findIntRowIndex", ReplyAction="http://tempuri.org/IWCFSqlAccess/findIntRowIndexResponse")]
        System.Threading.Tasks.Task<int> findIntRowIndexAsync(System.Data.DataSet ds, int valueToFind, int startingIndex, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/findTextRowIndex", ReplyAction="http://tempuri.org/IWCFSqlAccess/findTextRowIndexResponse")]
        int findTextRowIndex(System.Data.DataSet ds, string valueToFind, int startingIndex, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/findTextRowIndex", ReplyAction="http://tempuri.org/IWCFSqlAccess/findTextRowIndexResponse")]
        System.Threading.Tasks.Task<int> findTextRowIndexAsync(System.Data.DataSet ds, string valueToFind, int startingIndex, string colName, int defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getDataFromDataBase", ReplyAction="http://tempuri.org/IWCFSqlAccess/getDataFromDataBaseResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nsa_Selection.WCFSqlAccessSVC.CompositeType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Type))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
        object getDataFromDataBase(string connectionStr, string cmdText, string colName, System.Type type, object defaultvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFSqlAccess/getDataFromDataBase", ReplyAction="http://tempuri.org/IWCFSqlAccess/getDataFromDataBaseResponse")]
        System.Threading.Tasks.Task<object> getDataFromDataBaseAsync(string connectionStr, string cmdText, string colName, System.Type type, object defaultvalue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFSqlAccessChannel : Nsa_Selection.WCFSqlAccessSVC.IWCFSqlAccess, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFSqlAccessClient : System.ServiceModel.ClientBase<Nsa_Selection.WCFSqlAccessSVC.IWCFSqlAccess>, Nsa_Selection.WCFSqlAccessSVC.IWCFSqlAccess {
        
        public WCFSqlAccessClient() {
        }
        
        public WCFSqlAccessClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFSqlAccessClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFSqlAccessClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFSqlAccessClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Nsa_Selection.WCFSqlAccessSVC.CompositeType GetDataUsingDataContract(Nsa_Selection.WCFSqlAccessSVC.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Nsa_Selection.WCFSqlAccessSVC.CompositeType> GetDataUsingDataContractAsync(Nsa_Selection.WCFSqlAccessSVC.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public System.Data.DataSet getDataSet(string connectStr, string cmdText) {
            return base.Channel.getDataSet(connectStr, cmdText);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getDataSetAsync(string connectStr, string cmdText) {
            return base.Channel.getDataSetAsync(connectStr, cmdText);
        }
        
        public string executeNonQuery(string connectStr, string cmdText) {
            return base.Channel.executeNonQuery(connectStr, cmdText);
        }
        
        public System.Threading.Tasks.Task<string> executeNonQueryAsync(string connectStr, string cmdText) {
            return base.Channel.executeNonQueryAsync(connectStr, cmdText);
        }
        
        public int executeNonQueryList(string connectStr, string[] cmdList) {
            return base.Channel.executeNonQueryList(connectStr, cmdList);
        }
        
        public System.Threading.Tasks.Task<int> executeNonQueryListAsync(string connectStr, string[] cmdList) {
            return base.Channel.executeNonQueryListAsync(connectStr, cmdList);
        }
        
        public string checkConnection(string connectStr) {
            return base.Channel.checkConnection(connectStr);
        }
        
        public System.Threading.Tasks.Task<string> checkConnectionAsync(string connectStr) {
            return base.Channel.checkConnectionAsync(connectStr);
        }
        
        public System.Data.DataSet getExcelDataSet(string excelfilename, string cmdText) {
            return base.Channel.getExcelDataSet(excelfilename, cmdText);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getExcelDataSetAsync(string excelfilename, string cmdText) {
            return base.Channel.getExcelDataSetAsync(excelfilename, cmdText);
        }
        
        public System.Data.DataSet getExcelRangeDataSet(string excelfilename, string excelSheetName, string excelColsRange) {
            return base.Channel.getExcelRangeDataSet(excelfilename, excelSheetName, excelColsRange);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getExcelRangeDataSetAsync(string excelfilename, string excelSheetName, string excelColsRange) {
            return base.Channel.getExcelRangeDataSetAsync(excelfilename, excelSheetName, excelColsRange);
        }
        
        public int excelExecuteNonQuery(string excelfilename, string cmdText) {
            return base.Channel.excelExecuteNonQuery(excelfilename, cmdText);
        }
        
        public System.Threading.Tasks.Task<int> excelExecuteNonQueryAsync(string excelfilename, string cmdText) {
            return base.Channel.excelExecuteNonQueryAsync(excelfilename, cmdText);
        }
        
        public System.Data.DataSet readExcelDataSet(string excelfilename, int sheetNumber) {
            return base.Channel.readExcelDataSet(excelfilename, sheetNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> readExcelDataSetAsync(string excelfilename, int sheetNumber) {
            return base.Channel.readExcelDataSetAsync(excelfilename, sheetNumber);
        }
        
        public System.Data.DataSet readExcelRangeDataSet(string excelfilename, int sheetNumber, int[] sheetRange) {
            return base.Channel.readExcelRangeDataSet(excelfilename, sheetNumber, sheetRange);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> readExcelRangeDataSetAsync(string excelfilename, int sheetNumber, int[] sheetRange) {
            return base.Channel.readExcelRangeDataSetAsync(excelfilename, sheetNumber, sheetRange);
        }
        
        public object extractDataFromDataSet(System.Data.DataSet ds, int rowIndex, string colName, System.Type type, object defaultvalue) {
            return base.Channel.extractDataFromDataSet(ds, rowIndex, colName, type, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<object> extractDataFromDataSetAsync(System.Data.DataSet ds, int rowIndex, string colName, System.Type type, object defaultvalue) {
            return base.Channel.extractDataFromDataSetAsync(ds, rowIndex, colName, type, defaultvalue);
        }
        
        public string getTextFromDataBase(string connectionString, string cmdText, string colName, string defaultvalue) {
            return base.Channel.getTextFromDataBase(connectionString, cmdText, colName, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<string> getTextFromDataBaseAsync(string connectionString, string cmdText, string colName, string defaultvalue) {
            return base.Channel.getTextFromDataBaseAsync(connectionString, cmdText, colName, defaultvalue);
        }
        
        public string getTextFromDataSet(System.Data.DataSet ds, int rowIndex, string colName, object defaultvalue) {
            return base.Channel.getTextFromDataSet(ds, rowIndex, colName, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<string> getTextFromDataSetAsync(System.Data.DataSet ds, int rowIndex, string colName, object defaultvalue) {
            return base.Channel.getTextFromDataSetAsync(ds, rowIndex, colName, defaultvalue);
        }
        
        public int getIntFromDataBase(string connectionStr, string cmdText, string colName, int defaultvalue) {
            return base.Channel.getIntFromDataBase(connectionStr, cmdText, colName, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<int> getIntFromDataBaseAsync(string connectionStr, string cmdText, string colName, int defaultvalue) {
            return base.Channel.getIntFromDataBaseAsync(connectionStr, cmdText, colName, defaultvalue);
        }
        
        public int getIntFromDataSet(System.Data.DataSet ds, int rowIndex, string colName, int defaultvalue) {
            return base.Channel.getIntFromDataSet(ds, rowIndex, colName, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<int> getIntFromDataSetAsync(System.Data.DataSet ds, int rowIndex, string colName, int defaultvalue) {
            return base.Channel.getIntFromDataSetAsync(ds, rowIndex, colName, defaultvalue);
        }
        
        public int findIntRowIndex(System.Data.DataSet ds, int valueToFind, int startingIndex, string colName, int defaultvalue) {
            return base.Channel.findIntRowIndex(ds, valueToFind, startingIndex, colName, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<int> findIntRowIndexAsync(System.Data.DataSet ds, int valueToFind, int startingIndex, string colName, int defaultvalue) {
            return base.Channel.findIntRowIndexAsync(ds, valueToFind, startingIndex, colName, defaultvalue);
        }
        
        public int findTextRowIndex(System.Data.DataSet ds, string valueToFind, int startingIndex, string colName, int defaultvalue) {
            return base.Channel.findTextRowIndex(ds, valueToFind, startingIndex, colName, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<int> findTextRowIndexAsync(System.Data.DataSet ds, string valueToFind, int startingIndex, string colName, int defaultvalue) {
            return base.Channel.findTextRowIndexAsync(ds, valueToFind, startingIndex, colName, defaultvalue);
        }
        
        public object getDataFromDataBase(string connectionStr, string cmdText, string colName, System.Type type, object defaultvalue) {
            return base.Channel.getDataFromDataBase(connectionStr, cmdText, colName, type, defaultvalue);
        }
        
        public System.Threading.Tasks.Task<object> getDataFromDataBaseAsync(string connectionStr, string cmdText, string colName, System.Type type, object defaultvalue) {
            return base.Channel.getDataFromDataBaseAsync(connectionStr, cmdText, colName, type, defaultvalue);
        }
    }
}
